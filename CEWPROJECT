#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <curl/curl.h>
#include <jansson.h>

// Callback function to handle received data
size_t write_callback(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t realsize = size * nmemb;
    char *data = (char *)userp;

    // Append received data to the user buffer
    memcpy(data, contents, realsize);

    // Add null terminator to properly terminate the string
    data[realsize] = '\0';

    return realsize;
}
        // Save raw data to "raw_data.json"
        FILE *raw_data_file = fopen("raw_data.json", "a"); // Use "a" for append mode
        if (raw_data_file != NULL) {
            fprintf(raw_data_file, "%s\n\n\n", response_data);
            fclose(raw_data_file);
        } else {
            fprintf(stderr, "Failed to open raw_data.json for writing.\n");
        }

        // Parse JSON data
        json_t *root;
        json_error_t error;
        root = json_loads(response_data, 0, &error);
        if (!root) {
            fprintf(stderr, "error: on line %d: %s\n", error.line, error.text);
            curl_easy_cleanup(curl);
            curl_global_cleanup();
            return 1;
        }

        // Access temperature, humidity, and wind_speed values
        json_t *temperature = json_object_get(json_object_get(root, "current"), "temperature_2m");
        //json_t *humidity = json_object_get(json_object_get(root, "current"), "relative_humidity_2m");
        json_t *wind_speed = json_object_get(json_object_get(root, "current"), "wind_speed_10m");
        json_t *wind_direction = json_object_get(json_object_get(root, "current"), "wind_direction_10m");
        json_t *surface_pressure = json_object_get(json_object_get(root, "current"), "surface_pressure");
        json_t *sealevel_pressure = json_object_get(json_object_get(root, "current"), "pressure_msl");
        // Save processed data to "processed_data"
    	FILE *processed_data_file = fopen("processed_data.json", "a"); // Use "a" for append mode
        if (processed_data_file != NULL) {
            fprintf(processed_data_file, "- - - - - - - - - - - - - Processed Data - - - - - - - - - - - - -\n");
            fprintf(processed_data_file,"Report Generated on: %s\n", formatted_time);
            fprintf(processed_data_file, "Temperature: %.2f°C\n", json_real_value(temperature));
            //fprintf(processed_data_file, "Humidity: %.2f%%\n", json_real_value(humidity));
            fprintf(processed_data_file, "Wind Speed(10m): %.2f km/h\n", json_real_value(wind_speed));
            fprintf(processed_data_file,"Wind Direction(10m): %.2f °\n", json_real_value(wind_direction));
            fprintf(processed_data_file,"Surface Pressure: %.2f hPa\n", json_real_value(surface_pressure));
            fprintf(processed_data_file,"Sealevel Pressure: %.2f hPa\n\n", json_real_value(sealevel_pressure));
            fclose(processed_data_file);
        } else {
            fprintf(stderr, "Failed to open processed_data.txt for writing.\n");
        }
        
   
        // Print the processed values
   	printf("---------------------------------------------------------------\n");
    	printf("                     Weather Report                            \n");
    	printf("---------------------------------------------------------------\n");
	printf("Report Generated on: %s\n", formatted_time);
	printf("Temperature: %.2f°C\n", json_real_value(temperature));
        //printf("Humidity: %.2f%%\n", json_real_value(humidity));
        printf("Wind Speed(10m): %.2f km/h\n", json_real_value(wind_speed));
        printf("Wind Direction(10m): %.2f °\n", json_real_value(wind_direction));
        printf("Surface Pressure: %.2f hPa\n", json_real_value(surface_pressure));
        printf("Sealevel Pressure: %.2f hPa\n", json_real_value(sealevel_pressure));







